clc;
clear;

% Load datasets
load('training_data');
inverse_model = 'inverse_ph_model.mat';

% Check for existing model
if exist(model_filename, 'file') == 1
    fprintf('Loading pre-trained model from: %s\n', model_filename);
    load(model_filename);
else
    fprintf('No existing model found. Starting training...\n');


    % Prepare training sequences
    [~, initial_flow] = get_init_op();

    flow_data = train_dataset.u.signals(1).values(:,1);
    ph_measurements = train_dataset.x.signals(3).values(:,1);

   numsamples= numel(flow_data);

    % Data preprocessing reverse the mapping direction
    [X_train, train_settings] = mapminmax(phme(1:num_samples-1)');
    Y_train = ph_measurements(2:end)';
disp(X_train)
disp(flow_data(1:num_samples-1)')

end